import{_ as s,o as i,c as a,R as n}from"./chunks/framework.vB1haF5z.js";const y=JSON.parse('{"title":"Base64编码","description":"","frontmatter":{},"headers":[],"relativePath":"docs/编码/BASE64.md","filePath":"docs/编码/BASE64.md"}'),p={name:"docs/编码/BASE64.md"},h=n(`<h1 id="base64编码" tabindex="-1">Base64编码 <a class="header-anchor" href="#base64编码" aria-label="Permalink to &quot;Base64编码&quot;">​</a></h1><p>Base64 是一种用64个字符表示任意二进制数据的编码方法，广泛用于在需要以文本形式存储或传输二进制数据的场合，如在电子邮件、XML或JSON数据中。Base64编码选用了64个字符：大写字母A-Z、小写字母a-z、数字0-9，加上两个符号+和/，共计64个字符，等号=用作填充字符。</p><h2 id="base64编码的过程可以概述如下" tabindex="-1">Base64编码的过程可以概述如下 <a class="header-anchor" href="#base64编码的过程可以概述如下" aria-label="Permalink to &quot;Base64编码的过程可以概述如下&quot;">​</a></h2><p><strong>二进制数据分组</strong>：首先，原始二进制数据被分割成每组3个字节（共24位）的小组。如果最后一组不足3个字节，会添加额外的0位（填充位）以使其达到24位。</p><p><strong>转换为64进制</strong>：每组24位接着被划分为4个6位的小组。这些6位的值将用于在Base64字符表中查找对应的字符。</p><p><strong>编码输出</strong>：每个6位的小组对应Base64表中的一个字符，将这些字符连续排列起来，就形成了原始数据的Base64编码形式。如果原始数据的字节数不是3的倍数，则在编码的末尾会添加一个或两个=字符作为填充，以使编码的总长度成为4的倍数。</p><h2 id="base64编码的特点包括" tabindex="-1">Base64编码的特点包括 <a class="header-anchor" href="#base64编码的特点包括" aria-label="Permalink to &quot;Base64编码的特点包括&quot;">​</a></h2><p><strong>编码效率</strong>：Base64编码后的数据比原始数据大约增加1/3。每3个字节的数据经过Base64编码后会变成4个字符。</p><p><strong>可读性</strong>：由于编码仅使用可打印字符，因此编码后的数据可以在不支持二进制的文本系统中安全地传输和存储。</p><p><strong>通用性</strong>：Base64编码广泛应用于多种场合，包括电子邮件中的MIME编码、数据URL、HTTP基本认证等。</p><p>尽管Base64编码非常有用，但它不是一种加密方法，也不应该用于安全敏感的数据传输，因为编码后的数据可以很容易地被解码回原始形式。</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><h3 id="base64码表" tabindex="-1">base64码表 <a class="header-anchor" href="#base64码表" aria-label="Permalink to &quot;base64码表&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> base64Talbe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;A&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;B&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;D&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;E&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;F&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;G&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;H&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;I&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;J&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;K&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;L&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;N&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;O&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;P&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;R&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;S&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;T&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;U&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;V&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;W&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;X&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Z&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;f&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;g&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;i&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;j&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;k&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;l&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;m&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;n&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;o&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;p&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;q&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;r&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;t&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;u&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;v&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;w&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;x&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;y&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;z&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;6&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;7&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;9&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;+&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="字符串转base64的例子" tabindex="-1">字符串转base64的例子 <a class="header-anchor" href="#字符串转base64的例子" aria-label="Permalink to &quot;字符串转base64的例子&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以数字 1 为例子 对应unicode位置 49 小于128 ASCII范围 对应utf8编码 不变</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 49 二进制</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;00110001&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.分割三个字节，不足24位 补 0，这一步的目的是形成完整的分组</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00110001</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 00000000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2.划分6位一小组</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">001100</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 000000</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 000000</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3.划分后二进制数据转10进制 [12, 16, 0, 0]，在 base64Talbe 中找到对应位置的字符可以得到 MQAA</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意：AA是填充字符，最后会被替换成 = 阅读下文</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4.替换MQAA中填充字符，得到最终结果</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MQ==&quot;</span></span></code></pre></div><div class="language-info vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">info</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Base64编码的填充规则确实有点绕。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>首先，重点是Base64编码将3个字节的原始数据转换为4个Base64字符。</span></span>
<span class="line"><span>这是因为每个Base64字符只能表示6位（2^6=64），而每个字节包含8位。</span></span>
<span class="line"><span>所以，3个字节共24位可以被等分为4组，每组6位，对应于4个Base64字符。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>当原始数据不足3个字节时，Base64编码会添加额外的0位（称为填充位），</span></span>
<span class="line"><span>以确保能够形成完整的6位分组。</span></span>
<span class="line"><span>这些填充位只是为了形成完整的分组，并不代表原始数据的一部分。</span></span>
<span class="line"><span>因此，当这些额外的0位被编码为Base64字符时，</span></span>
<span class="line"><span>它们会被转换为Base64表中的第一个字符，即A，因为二进制的000000对应于Base64中的A。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>然而，这里的关键是区分填充位和填充字符。</span></span>
<span class="line"><span>填充位是在编码过程中添加到原始二进制数据中的额外0位，</span></span>
<span class="line"><span>以形成完整的6位分组。</span></span>
<span class="line"><span>而填充字符（=）是在Base64编码的字符串中添加的，</span></span>
<span class="line"><span>用于标示原始数据的实际结束，</span></span>
<span class="line"><span>并保证Base64字符串总长度是4的倍数。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>对于只有1个字节的原始数据（比如1的ASCII码），在转换为二进制并添加填充位后，</span></span>
<span class="line"><span>会形成两个完整的6位分组（第一个分组来自原始数据，第二个分组全为填充位），</span></span>
<span class="line"><span>对应于两个Base64字符。剩余的两个6位分组（全为填充位）也会被转换为Base64字符A。</span></span>
<span class="line"><span>但是，这里的AA实际上表示原始数据之后添加的填充位，而不是原始数据的一部分。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>因此，为了区分这些因填充位转换得到的Base64字符（如AA）和原始数据的实际结束，</span></span>
<span class="line"><span>Base64编码在最后添加=字符作为填充字符。</span></span>
<span class="line"><span>在只有1个字节的原始数据的情况下，会添加两个=，</span></span>
<span class="line"><span>以表示最后两个Base64字符实际上是由填充位转换来的，</span></span>
<span class="line"><span>而不是由原始数据转换来的。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>所以，对于字符1的Base64编码，我们得到MQ==而不是MQAA。</span></span>
<span class="line"><span>MQ对应于原始数据，而==表示除了MQ之外的部分实际上是由填充位而不是原始数据转换来的。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>也就是说替换字符=会替换 替换位的字符A（注意是替换位的）</span></span></code></pre></div>`,17),k=[h];function l(t,e,E,r,F,d){return i(),a("div",null,k)}const B=s(p,[["render",l]]);export{y as __pageData,B as default};
