import{_ as a,o as e,c as i,R as o}from"./chunks/framework.vB1haF5z.js";const p=JSON.parse('{"title":"编码","description":"","frontmatter":{},"headers":[],"relativePath":"docs/编码/index.md","filePath":"docs/编码/index.md"}'),r={name:"docs/编码/index.md"},n=o('<h1 id="编码" tabindex="-1">编码 <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;编码&quot;">​</a></h1><h2 id="_1-字符编码" tabindex="-1">1.字符编码 <a class="header-anchor" href="#_1-字符编码" aria-label="Permalink to &quot;1.字符编码&quot;">​</a></h2><p>字符编码是一种用于将字符集（如字母、数字和其他符号）映射到计算机可以理解的二进制数字的系统。它是文本数据在计算机系统中存储和传输的基础。不同的字符编码系统支持不同的字符集和语言</p><h2 id="_2-字符集" tabindex="-1">2.字符集 <a class="header-anchor" href="#_2-字符集" aria-label="Permalink to &quot;2.字符集&quot;">​</a></h2><h3 id="ascii-美国信息交换标准代码-1960年代" tabindex="-1">ASCII（美国信息交换标准代码）(1960年代) <a class="header-anchor" href="#ascii-美国信息交换标准代码-1960年代" aria-label="Permalink to &quot;ASCII（美国信息交换标准代码）(1960年代)&quot;">​</a></h3><p>定义：ASCII是最早的字符编码之一，定义了128个字符的编码，包括英文字母、数字、标点符号和控制字符。<br> 二进制：每个ASCII字符用7位二进制数表示，范围从0000000到1111111。<br> 特点：ASCII是最早的字符编码之一，用7位二进制数（后来扩展到8位）来表示128个字符，包括英文字母、数字、标点符号和一些控制字符。ASCII是基于英语的，因此无法满足其他语言的需求。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>ASCII码一共规定了128个字符的编码，比如空格SPACE是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的一位统一规定为0。</p></div><h3 id="扩展ascii-1970年代" tabindex="-1">扩展ASCII（1970年代） <a class="header-anchor" href="#扩展ascii-1970年代" aria-label="Permalink to &quot;扩展ASCII（1970年代）&quot;">​</a></h3><p>特点：为了支持更多字符，包括一些非英语字符，各种扩展ASCII编码被开发出来，使用第八位作为扩展位来提供额外的字符集。然而，这些扩展版本彼此不兼容，导致了分裂和混乱。</p><h3 id="iso-8859-1980年代" tabindex="-1">ISO 8859（1980年代） <a class="header-anchor" href="#iso-8859-1980年代" aria-label="Permalink to &quot;ISO 8859（1980年代）&quot;">​</a></h3><p>定义：为了支持更多语言，ISO 8859标准族扩展了ASCII，增加了额外的字符集以覆盖其他欧洲语言。<br> 特点：为了解决不同扩展ASCII版本之间的兼容性问题，国际标准化组织（ISO）推出了一系列的ISO 8859标准，每个标准支持不同的语言和字符集，如ISO 8859-1（Latin-1）支持大多数西欧语言。</p><h3 id="unicode-1990年代至今" tabindex="-1">Unicode（1990年代至今） <a class="header-anchor" href="#unicode-1990年代至今" aria-label="Permalink to &quot;Unicode（1990年代至今）&quot;">​</a></h3><p>特点：为了解决全球范围内的字符表示问题，Unicode标准被开发出来，旨在为世界上所有的字符提供一个唯一的编码。Unicode开始于1991年发布1.0版本，并持续更新扩展。它支持超过137,000个字符，覆盖了150多种语言和符号系统。 实现：Unicode有几种实现方式，包括UTF-8、UTF-16和UTF-32，分别使用不同长度的字节序列来表示Unicode字符集中的码点。</p><p>随着全球化的发展，字符编码的演进体现了对多语言、多文化支持的不断增强，以及对信息交换的全球标准化的需求。Unicode和UTF-8的广泛采用标志着一个重要的里程碑，确保了文本数据在全球范围内的无缝交流和处理</p><h2 id="_3-编码方式" tabindex="-1">3.编码方式 <a class="header-anchor" href="#_3-编码方式" aria-label="Permalink to &quot;3.编码方式&quot;">​</a></h2><h3 id="_1-ascii-美国信息交换标准代码" tabindex="-1">1. ASCII（美国信息交换标准代码） <a class="header-anchor" href="#_1-ascii-美国信息交换标准代码" aria-label="Permalink to &quot;1. ASCII（美国信息交换标准代码）&quot;">​</a></h3><p>全称：American Standard Code for Information Interchange<br> 字符数：128个字符，包括英文大写和小写字母、数字、标点符号和控制字符。<br> 编码：使用7位二进制数（0-127）表示，通常以8位（一个字节）存储，高位为0。</p><h3 id="_2-iso-8859-系列" tabindex="-1">2. ISO 8859 系列 <a class="header-anchor" href="#_2-iso-8859-系列" aria-label="Permalink to &quot;2. ISO 8859 系列&quot;">​</a></h3><p>全称：International Organization for Standardization 8859<br> 字符数：每个ISO 8859标准定义256个字符，包括ASCII字符和其他特定语言或地区的字符。<br> 编码：使用8位二进制数（0-255）表示。<br> 变体：有多个变体，如ISO 8859-1（拉丁字母第1部分，涵盖大部分西欧语言）、ISO 8859-5（涵盖西里尔字母）、ISO 8859-6（涵盖阿拉伯语）等。</p><h3 id="_3-gb-2312" tabindex="-1">3. GB 2312 <a class="header-anchor" href="#_3-gb-2312" aria-label="Permalink to &quot;3. GB 2312&quot;">​</a></h3><p>发布年份：1980年，是较早的标准。 字符集：包括 6763 个汉字和 682 个其他符号，共计7445个字符。包括简体中文汉字（包括常用汉字和部分罕见汉字）、拉丁字母、日文假名、希腊字母、俄文字符等。 设计目的：主要用于覆盖当时认为的常用简体中文字符，适用于大多数日常应用。 编码方式：双字节编码，每个字符占用两个字节，其中高字节的范围是0xA1-0xF7，低字节的范围是0xA1-0xFE。</p><h3 id="_4-gbk" tabindex="-1">4.GBK <a class="header-anchor" href="#_4-gbk" aria-label="Permalink to &quot;4.GBK&quot;">​</a></h3><p>发布年份：1995年，是对 GB 2312 的扩展。 字符集：包含了超过21000个字符，不仅包括 GB 2312 中的所有字符，还增加了更多的汉字、符号以及日文、韩文字符等。<br> 设计目的：为了更好地满足电子文档和数据交换的需要，特别是为了包含更多的汉字和符号，以及提供对其他东亚文字的一定支持。<br> 编码方式：GBK 仍然是双字节编码，但它扩展了字符的编码范围。GBK 编码的字符可以占用一个字节（对应ASCII字符）或两个字节。对于双字节字符，其范围大大扩展，允许编码更多的字符。</p><h3 id="_5-big5" tabindex="-1">5. Big5 <a class="header-anchor" href="#_5-big5" aria-label="Permalink to &quot;5. Big5&quot;">​</a></h3><p>字符数：包括繁体中文字符及其他符号，共约13,000多个字符。<br> 编码：使用双字节表示中文字符，范围从0xA140至0xF9FE。</p><h3 id="_6-utf-8-8位unicode转换格式" tabindex="-1">6. UTF-8（8位Unicode转换格式） <a class="header-anchor" href="#_6-utf-8-8位unicode转换格式" aria-label="Permalink to &quot;6. UTF-8（8位Unicode转换格式）&quot;">​</a></h3><p>字符数：能够表示Unicode标准中定义的所有字符。<br> 编码：使用1到4个字节表示一个字符，ASCII字符只需一个字节，拉丁字母及其衍生形式通常需要两个字节，常用的东亚字符（如中文、日文、韩文）需要三个字节，其他较少用的Unicode字符需要四个字节。<br> 特点：与ASCII兼容，是互联网上最广泛使用的Unicode编码。</p><h3 id="_7-utf-16-16位unicode转换格式" tabindex="-1">7. UTF-16（16位Unicode转换格式） <a class="header-anchor" href="#_7-utf-16-16位unicode转换格式" aria-label="Permalink to &quot;7. UTF-16（16位Unicode转换格式）&quot;">​</a></h3><p>字符数：能够表示Unicode标净中定义的所有字符。<br> 编码：使用1或2个16位代码单元（2或4个字节）表示一个字符。位于基本多文种平面（BMP）的字符使用2个字节表示，超出BMP的字符使用4个字节（代理对）表示。</p><h3 id="_8-utf-32-32位unicode转换格式" tabindex="-1">8. UTF-32（32位Unicode转换格式） <a class="header-anchor" href="#_8-utf-32-32位unicode转换格式" aria-label="Permalink to &quot;8. UTF-32（32位Unicode转换格式）&quot;">​</a></h3><p>字符数：能够表示Unicode标准中定义的所有字符。<br> 编码：使用4个字节表示一个字符，每个Unicode码点直接对应一个固定的4字节序列。 特点：由于其固定长度的特性，UTF-32在某些情况下可以简化字符处理的算法，但相对于UTF-8和UTF-16，它的存储和传输成本更高。 这些编码方式各有特点和适用场景，选择合适的编码方式需要考虑具体的应用需求，如字符集的覆盖范围、存储和传输的效率等因素。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这些字符集和编码的关系很容易让程序员混淆，现在小结一下。</p><p>简单来说：Unicode、GBK和Big5码等就是编码的值（也就是术语“字符集”），而UTF-8、UTF-16、UTF32之类就是这个值的表现形式（即术语“编码格式”）。</p><p>另外：Unicode、GBK和Big5码等字符集是不兼容的，同一个汉字在这三个字符集里的码值是完全不一样的。如＂汉＂的Unicode值与gbk就是不一样的，假设Unicode为a040，GBK为b030。以UTF-8为例，UTF-8码完全只针对Unicode来组织的，如果GBK要转UTF-8必须先转Unicode码，再转UTF-8就OK了。</p><p>即GBK、GB2312等与UTF8之间都必须通过Unicode编码才能相互转换：<br> 1）GBK、GB2312 --先转--&gt; Unicode --再转--&gt; UTF8<br> 2）UTF8 --先转--&gt; Unicode --再转--&gt; GBK、GB2312</p>',36),t=[n];function d(c,h,l,s,b,u){return e(),i("div",null,t)}const U=a(r,[["render",d]]);export{p as __pageData,U as default};
