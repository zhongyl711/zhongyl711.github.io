import{_ as s,o as t,c as a,R as i}from"./chunks/framework.jG2La8vi.js";const c=JSON.parse('{"title":"UTF-8","description":"","frontmatter":{},"headers":[],"relativePath":"docs/编码/UTF8.md","filePath":"docs/编码/UTF8.md"}'),n={name:"docs/编码/UTF8.md"},x=i(`<h1 id="utf-8" tabindex="-1">UTF-8 <a class="header-anchor" href="#utf-8" aria-label="Permalink to &quot;UTF-8&quot;">​</a></h1><h2 id="什么是utf-8" tabindex="-1">什么是UTF-8？ <a class="header-anchor" href="#什么是utf-8" aria-label="Permalink to &quot;什么是UTF-8？&quot;">​</a></h2><p>UTF-8（8-bit Unicode Transformation Format）是一种针对Unicode字符集的可变长度字符编码方式。它可以使用1到4个字节来表示Unicode标准中的任何字符，是Unicode实现的一种非常流行的形式。UTF-8的设计使其成为网络和多语言文本处理中最广泛使用的编码方式之一。</p><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><p><strong>Web开发</strong>：UTF-8是互联网上最常用的编码方式，用于HTML、XML、JSON等Web技术。<br><strong>文件编码</strong>：许多文本编辑器和系统工具使用UTF-8作为默认的文本文件编码。<br><strong>软件开发</strong>：多语言编程环境和数据库系统广泛支持UTF-8，用于处理国际化和本地化数据。<br><strong>电子邮件和文档</strong>：UTF-8用于电子邮件协议和各种文档格式，以支持多种语言的内容。</p><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><p><strong>兼容ASCII</strong>：UTF-8兼容传统的ASCII编码，ASCII字符集中的字符在UTF-8中保持单字节不变，这简化了ASCII文本到UTF-8文本的转换过程。<br><strong>可变长度</strong>：UTF-8使用1到4个字节来表示字符，这使得它可以有效地表示Unicode字符集中的任何字符，同时对于常用的ASCII字符集保持高效。<br><strong>自同步特性</strong>：UTF-8的设计使得从任何字节序列中的任何位置开始的解码都能找到字符边界，有助于恢复数据和错误检测。</p><h2 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h2><p><strong>广泛支持</strong>：作为互联网和许多操作系统的标准编码，UTF-8得到了广泛的支持和应用。<br><strong>节省空间</strong>：对于以英文为主的文本，UTF-8通常比其他Unicode编码（如UTF-16或UTF-32）更节省空间。<br><strong>兼容性</strong>：UTF-8与ASCII编码兼容，使得旧软件和系统可以在不进行大幅修改的情况下处理UTF-8数据。</p><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><p><strong>非固定长度</strong>：UTF-8的可变长度特性意味着某些操作，如计算字符串长度或索引字符位置，可能比固定长度编码更复杂和低效。<br><strong>对某些语言不是最优的</strong>：对于主要使用亚洲字符集的文本（如中文、日文、韩文），UTF-8可能不如其他编码（如UTF-16）空间效率高。</p><h2 id="编码规则" tabindex="-1">编码规则 <a class="header-anchor" href="#编码规则" aria-label="Permalink to &quot;编码规则&quot;">​</a></h2><p><strong>1字节</strong>：0xxxxxxx。用于表示标准ASCII字符，与ASCII编码兼容。<br><strong>2字节</strong>：110xxxxx 10xxxxxx。用于表示拉丁字母扩展、希腊字母、西里尔字母等。<br><strong>3字节</strong>：1110xxxx 10xxxxxx 10xxxxxx。用于表示基本多文种平面（BMP）内的字符，包括大多数常用字符。<br><strong>4字节</strong>：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。用于表示超出BMP的字符，包括一些罕见字符、特殊符号和表情符号。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>UTF-8 的编码规则很简单，只有二条：<br> 1）对于单字节的符号：字节的第一位设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的；<br> 2）对于n字节的符号（n &gt; 1）：第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码。</p></div><p><strong>下表总结了编码规则，字母 x 表示可用编码的位：</strong></p><table><thead><tr><th>Unicode符号范围 (16进制)</th><th>UTF-8编码方式</th></tr></thead><tbody><tr><td>0000 0000 - 0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0000 0080 - 0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0000 0800 - 0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0001 0000 - 0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>跟据上表，解读 UTF-8 编码非常简单。如果一个字节的第一位是0，则这个字节单独就是一个字符；如果第一位是1，则连续有多少个1，就表示当前字符占用多少个字节。</p><p>下面，还是以汉字严为例，演示如何实现 UTF-8 编码。</p><p>严的 Unicode 是4E25（100111000100101），根据上表，可以发现4E25处在第三行的范围内（0000 0800 - 0000 FFFF），因此严的 UTF-8 编码需要三个字节，即格式是1110xxxx 10xxxxxx 10xxxxxx。然后，从严的最后一个二进制位开始，依次从后向前填入格式中的x，多出的位补0。这样就得到了，严的 UTF-8 编码是11100100 10111000 10100101，转换成十六进制就是E4B8A5。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100111000100101 二进制</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;严&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4e25 16进制 范围在0800 - FFFF之间 所以占用三字节 对应UTF-8的编码方式为 1110xxxx 10xxxxxx 10xxxxxx</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;严&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">codePointAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把x的位置按序从后向前填充上他的二进制数即可，不够填的位置写0，这样就得到了对应utf编码的值</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 严的 UTF-8 编码是11100100 10111000 10100101，转换成十六进制就是E4B8A5。</span></span></code></pre></div><p>UTF-8的设计旨在平衡多种需求，包括与ASCII的兼容性、对全Unicode范围的支持、以及对文本数据的高效编码，使其成为当今环境中处理文本数据的理想选择。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>替换字符（ Unicode码点 U+FFFD ） 通常指的是在文本处理过程中，遇到非法的、无法解码的UTF-8序列或者损坏的数据时，应用程序或系统用来替代原字符的一个占位符。在Unicode中，这个特殊的字符是“replacement character”，它的Unicode码点是U+FFFD（十六进制），在UTF-8编码下表现为三个字节的序列\\xEF\\xBF\\xBD。 在网页浏览器中，如果遇到无法解码的UTF-8字符，通常会显示一个空白方框内带有问号的图案（�）来代替那个无法识别的字符。这个符号就是“replacement character”的可视化表示。</p><blockquote><p>网络传输的时候如果是字符流分段传输就需要注意这一点了，（如大文件分片传输）</p></blockquote></div>`,22),e=[x];function r(o,h,l,p,d,F){return t(),a("div",null,e)}const g=s(n,[["render",r]]);export{c as __pageData,g as default};
