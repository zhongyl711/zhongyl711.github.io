import{_ as i,o as s,c as a,R as n}from"./chunks/framework.vB1haF5z.js";const t="/assets/硬链接.A60CgHyg.png",u=JSON.parse('{"title":"硬链接","description":"","frontmatter":{},"headers":[],"relativePath":"docs/file/硬链接.md","filePath":"docs/file/硬链接.md"}'),l={name:"docs/file/硬链接.md"},e=n(`<h1 id="硬链接" tabindex="-1">硬链接 <a class="header-anchor" href="#硬链接" aria-label="Permalink to &quot;硬链接&quot;">​</a></h1><h2 id="_1-什么是硬链接" tabindex="-1">1.什么是硬链接 <a class="header-anchor" href="#_1-什么是硬链接" aria-label="Permalink to &quot;1.什么是硬链接&quot;">​</a></h2><p>硬链接（Hard Link）是Unix和类Unix操作系统中的一种文件系统机制，它允许一个文件系统中的多个文件名指向同一个文件(相同内容或者说相同数据块)。硬链接提供了不同路径或名称访问相同文件内容的方式。</p><h2 id="_2-硬链接的特点" tabindex="-1">2.硬链接的特点 <a class="header-anchor" href="#_2-硬链接的特点" aria-label="Permalink to &quot;2.硬链接的特点&quot;">​</a></h2><ul><li><strong>Inode引用</strong>：硬链接直接指向文件的inode（索引节点）。inode包含了文件的元数据和数据块地址。在文件系统中，多个硬链接可以共享同一个inode号。</li><li><strong>文件内容共享</strong>：所有硬链接到同一inode的文件共享相同的文件内容和属性（如大小、权限等）。对其中任何一个链接的内容修改都会反映在所有链接中。</li><li><strong>计数器</strong>：每个inode都有一个链接计数器，表示有多少硬链接指向该inode。当创建一个新的硬链接时，inode的链接计数器增加；当删除一个链接时，计数器减少。只有当链接计数器降到0时，文件的数据才会被文件系统释放。</li><li><strong>不跨越文件系统</strong>：硬链接不能跨越不同的文件系统，因为每个文件系统都有独立的inode表。</li><li><strong>不可链接目录</strong>：大多数Unix和类Unix系统不允许对目录创建硬链接，以避免产生循环引用和其他复杂情况</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>硬链接不可链接目录的原因</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">├──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dir1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link_to_dir2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dir2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">└──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dir2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    └──</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link_to_dir1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dir1</span></span></code></pre></div><p>在这种配置下，dir1 包含了一个指向 dir2 的链接，而 dir2 又包含了一个指向 dir1 的链接。这就形成了一个循环，如果文件系统的工具（如 ls, find 等）不特别处理这种情况，就会陷入无限循环，尝试遍历一个看似永无止境的目录结构。</p></div><h2 id="_3-创建硬链接" tabindex="-1">3.创建硬链接 <a class="header-anchor" href="#_3-创建硬链接" aria-label="Permalink to &quot;3.创建硬链接&quot;">​</a></h2><p>在Linux或Unix系统中，可以使用ln命令创建硬链接：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ln</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source_file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> link_name</span></span></code></pre></div><h2 id="_4-硬链接和inode" tabindex="-1">4.硬链接和inode <a class="header-anchor" href="#_4-硬链接和inode" aria-label="Permalink to &quot;4.硬链接和inode&quot;">​</a></h2><ul><li><p><strong>共享相同的inode</strong>：硬链接指向文件的inode。如果一个文件有多个硬链接，这些链接共享同一个inode号。这意味着它们指向同一个文件的数据和元数据。</p></li><li><p><strong>链接计数</strong>：每个inode有一个链接计数，表明有多少硬链接指向这个inode。当创建一个新的硬链接时，inode的链接计数增加；删除一个硬链接时，计数减少。只有当链接计数降至零时，文件系统才会释放该inode及其关联的数据块。</p></li><li><p><strong>文件的物理数据</strong>：由于所有硬链接共享同一个inode，它们也共享文件的物理数据。对文件内容的任何修改都会反映在所有的硬链接上。</p></li><li><p><strong>不同于软链接</strong>：硬链接与软链接（符号链接）不同。软链接是一个单独的文件，包含一个指向另一个文件路径的文本字符串。软链接有自己的inode，而硬链接共享其目标文件的inode。</p></li><li><p><strong>文件删除</strong>：只有当一个文件的所有硬链接都被删除，且没有任何进程打开该文件时，文件的数据才会被实际删除。</p></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>软链接可以跨文件系统，而硬链接不能，这主要是由于它们各自的工作方式和存储机制所决定的：</p><p><strong>软链接（符号链接）</strong></p><ul><li>路径引用：软链接通过存储目标文件或目录的路径来工作。它实际上是一个特殊的文件，其中包含了指向另一个文件或目录的路径字符串。</li><li>独立性：由于软链接仅保存路径信息，它们与文件数据的实际存储位置无关。因此，软链接可以引用任何文件系统上的文件或目录，无论目标文件所在的文件系统与软链接所在的文件系统是否相同。</li><li>文件系统边界：软链接可以指向不同文件系统上的文件或目录，因为它们依赖于路径信息，而非直接链接到文件数据。</li></ul><p><strong>硬链接</strong></p><ul><li>Inode引用：硬链接直接指向目标文件的inode（索引节点）。在Unix和类Unix系统中，inode是文件系统中的一个数据结构，用于存储文件的元数据和指向文件实际数据的指针。</li><li>同一文件系统限制：由于硬链接是对inode的直接引用，它们必须位于同一个文件系统中。不同的文件系统有不同的inode表，一个文件系统中的inode号在另一个文件系统中可能不存在或指向不同的文件。</li><li>不跨越文件系统：硬链接不能跨越文件系统边界，因为每个文件系统都有独立的inode管理机制。</li></ul><p><strong>结论</strong></p><p>软链接的灵活性在于它仅仅保存了指向目标文件的路径信息，而与文件的实际存储无关，因此可以跨越文件系统边界。</p><p>硬链接的限制在于它直接引用了文件的inode，而inode是特定于文件系统的，这意味着硬链接不能链接到其他文件系统中的文件。</p></div><h2 id="图例" tabindex="-1">图例 <a class="header-anchor" href="#图例" aria-label="Permalink to &quot;图例&quot;">​</a></h2><img src="`+t+'" data-fancybox="gallery">',14),o=[e];function d(p,r,h,k,c,g){return s(),a("div",null,o)}const F=i(l,[["render",d]]);export{u as __pageData,F as default};
