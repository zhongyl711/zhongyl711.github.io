import{_ as e,o,c as i,R as n}from"./chunks/framework.jG2La8vi.js";const t="/doc/assets/file1.2FRMwvJP.png",a="/doc/assets/file2.ZM4KN-is.png",l="/doc/assets/file3.E6nOXpI8.png",f=JSON.parse('{"title":"inode","description":"","frontmatter":{},"headers":[],"relativePath":"docs/file/inode.md","filePath":"docs/file/inode.md"}'),s={name:"docs/file/inode.md"},r=n('<h1 id="inode" tabindex="-1">inode <a class="header-anchor" href="#inode" aria-label="Permalink to &quot;inode&quot;">​</a></h1><h2 id="什么是inode" tabindex="-1">什么是inode？ <a class="header-anchor" href="#什么是inode" aria-label="Permalink to &quot;什么是inode？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>inode</code>（索引节点）是UNIX和类UNIX文件系统（如Linux）中的一个基本概念。它是文件系统的一个数据结构，用于存储有关文件的元数据，但不包含文件名或文件实际内容。每个文件或目录在文件系统中都有一个与之对应的唯一的inode。</p><p>每个inode都有一个唯一的编号（inode号）。当需要访问一个文件时，文件系统首先根据文件名找到相应的目录项（directory entry），该目录项包含文件的inode号。然后，通过inode号读取inode信息，从而得到文件的元数据和存储位置。</p><p>inode的设计使得UNIX和类UNIX文件系统能够高效地管理和访问文件和目录。例如，由于文件名不存储在inode中，可以实现硬链接，即多个文件名指向同一个inode，从而指向相同的文件内容。</p></div><h2 id="inode数据结构" tabindex="-1">inode数据结构 <a class="header-anchor" href="#inode数据结构" aria-label="Permalink to &quot;inode数据结构&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在UNIX和类UNIX系统（如Linux）中，inode（索引节点）是文件系统的一个关键数据结构，用于存储有关文件的元数据。每个inode结构块通常包含以下信息：</p><p>1.<strong>文件类型</strong>：指明文件是常规文件、目录、符号链接、字符设备、块设备、FIFO（命名管道），等等。</p><p>2.<strong>权限</strong>：文件的访问权限，包括读（r）、写（w）和执行（x）权限，分别针对文件所有者、所属组和其他用户。</p><p>3.<strong>所有者</strong>：文件所有者的用户ID（UID）。</p><p>4.<strong>群组</strong>：文件所属群组的群组ID（GID）。</p><p>5.<strong>大小</strong>：文件的大小，通常以字节为单位。</p><p>6.<strong>时间戳</strong>：文件的三个时间戳</p><ul><li><strong>i_atime（访问时间）</strong>：文件最后一次被访问的时间。</li><li><strong>i_mtime（修改时间）</strong>：文件内容最后一次被修改的时间。</li><li><strong>i_ctime（状态改变时间）</strong>：文件的状态（例如权限或所有权）最后一次被改变的时间。</li></ul><p>7.<strong>链接计数</strong>：文件的硬链接数量。当这个计数减少到0时，文件被删除。</p><p>8.<strong>数据块指针</strong>：指向文件系统中存储文件内容的数据块的指针。这些指针包括直接指针、间接指针、二级间接指针和三级间接指针。</p><p>9.<strong>文件系统特定信息</strong>：比如块大小、分配给文件的实际数据块数量等。</p><p>10.<strong>扩展属性</strong>：一些文件系统可能支持额外的扩展属性，如安全标签、ACL（访问控制列表）等。</p><p>inode结构的具体内容和格式可能会根据不同的文件系统有所不同，但基本包含的信息是类似的。这些信息使得文件系统能够有效地管理文件的存储、访问和权限控制。</p></div><blockquote><p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/tree/include/linux/fs.h?h=v6.6.8" target="_blank" rel="noreferrer">linux 内核 inode数据结构 打开后搜索inode</a></p></blockquote><h2 id="_1-操作系统中是如何查找inode号的" tabindex="-1">1.操作系统中是如何查找inode号的？ <a class="header-anchor" href="#_1-操作系统中是如何查找inode号的" aria-label="Permalink to &quot;1.操作系统中是如何查找inode号的？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在操作系统中，尤其是基于类Unix（如Linux）的系统中，桌面上的文件是通过路径找到与之对应的inode（索引节点）信息的。inode是文件系统的一个概念，用于存储有关文件的元数据，不包括文件名或文件实际内容的数据。文件的元数据包括文件的大小、权限、所有者、创建时间、修改时间等信息。</p><p>当您在文件系统中访问一个文件时（无论是在桌面环境还是命令行），以下步骤大致发生：</p><ul><li><p>1.路径解析：操作系统解析您提供的文件路径，这可能是绝对路径或相对路径。</p></li><li><p>2.查找目录项：在文件系统中，每个文件和目录都有一个目录项（directory entry）。目录项将文件名映射到相应的inode。</p></li><li><p>3.访问inode：一旦找到了与文件名对应的目录项，系统就会使用这个目录项来获取inode号。每个inode号都唯一地标识文件系统中的一个文件或目录。</p></li><li><p>4.读取inode信息：系统接着读取inode，这包含了文件的元数据，如大小、权限等。</p></li><li><p>5.访问文件数据：根据inode中的信息，系统可以找到文件数据实际存储在磁盘上的位置，并进行读取或写入操作。</p></li></ul><p>在一些其他类型的文件系统（如Windows上的NTFS）中，虽然具体的实现细节和术语可能有所不同，但基本的原理是相似的，即通过文件路径来查找和访问文件的元数据和内容。</p></div><h2 id="_2-桌面上的文件和路径信息是如何绑定的-如何双击后就知道路径的" tabindex="-1">2.桌面上的文件和路径信息是如何绑定的，如何双击后就知道路径的？ <a class="header-anchor" href="#_2-桌面上的文件和路径信息是如何绑定的-如何双击后就知道路径的" aria-label="Permalink to &quot;2.桌面上的文件和路径信息是如何绑定的，如何双击后就知道路径的？&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>桌面上的文件和其路径信息的绑定是由操作系统的桌面环境（例如Windows的资源管理器，macOS的Finder，或Linux的各种桌面环境如GNOME, KDE等）管理的。这个过程大致如下：</p><ul><li><p>1.文件存储：文件实际上存储在文件系统的某个位置，如 /Users/username/Desktop 在 macOS 或 C:\\Users\\username\\Desktop 在 Windows 上。</p></li><li><p>2.桌面环境：桌面环境负责显示桌面上的文件和文件夹。它读取特定的桌面路径（如上述路径），并将该路径下的每个文件和文件夹呈现为图标。</p></li><li><p>3.图标和文件的映射：每个图标都是对应文件或文件夹的视觉代表。桌面环境维护了一个映射，把每个图标与其对应的文件系统路径（文件的绝对路径）关联起来。</p></li><li><p>4.用户交互：当您双击桌面上的文件图标时，桌面环境接收到这个事件，并查找与该图标关联的文件路径。</p></li><li><p>5.打开文件：桌面环境使用这个路径信息来打开文件。这通常涉及调用与文件类型关联的应用程序。例如，双击一个 .txt 文件会打开文本编辑器，双击 .jpg 图像文件通常会打开图像查看器。</p></li></ul><p>应用程序与文件交互：启动的应用程序会接收到文件的路径，并使用它来直接从文件系统中加载文件内容。</p><p>这个过程使得用户界面（如桌面）可以为用户提供一个直观的方式来与存储在文件系统某个地方的文件交互。操作系统和桌面环境的这种设计抽象掉了底层文件系统的复杂性，使得用户可以通过简单的图形界面与文件交互。</p></div><h2 id="图例理解" tabindex="-1">图例理解 <a class="header-anchor" href="#图例理解" aria-label="Permalink to &quot;图例理解&quot;">​</a></h2><h3 id="_1-电脑打开某个文件-用户界面" tabindex="-1">1.电脑打开某个文件（用户界面） <a class="header-anchor" href="#_1-电脑打开某个文件-用户界面" aria-label="Permalink to &quot;1.电脑打开某个文件（用户界面）&quot;">​</a></h3><p><img src="'+t+'" alt="alt text" data-fancybox="gallery"></p><h3 id="_2-点击图标从系统记录的图标和路径的映射表中获取其路径" tabindex="-1">2.点击图标从系统记录的图标和路径的映射表中获取其路径 <a class="header-anchor" href="#_2-点击图标从系统记录的图标和路径的映射表中获取其路径" aria-label="Permalink to &quot;2.点击图标从系统记录的图标和路径的映射表中获取其路径&quot;">​</a></h3><p><img src="'+a+'" alt="alt text" data-fancybox="gallery"></p><h3 id="_3-根据路径在系统中的路径与inode映射表中找到对应的inode号" tabindex="-1">3.根据路径在系统中的路径与inode映射表中找到对应的inode号 <a class="header-anchor" href="#_3-根据路径在系统中的路径与inode映射表中找到对应的inode号" aria-label="Permalink to &quot;3.根据路径在系统中的路径与inode映射表中找到对应的inode号&quot;">​</a></h3><p><img src="'+l+'" alt="alt text" data-fancybox="gallery"></p>',17),d=[r];function p(c,h,u,_,g,m){return o(),i("div",null,d)}const x=e(s,[["render",p]]);export{f as __pageData,x as default};
